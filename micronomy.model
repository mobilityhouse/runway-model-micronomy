/*
 * Micronomy takes a stab at modelling a financial system in a manner that is
 * definitely inaccurate and exaggerated.
 *
 * Nothing has been modelled other than entities being able to give capital,
 * to others without questions asked. The only thing this demonstrates is how
 * messages are relayed through simple networks where messages are just passed
 * on as-is.
 *
 * All entities request resources from nodes that are upwards in the hierarchy.
 * Intermediate nodes (the ones with flags) act as relay stations by simply
 * receiving a message and relay it to all siblings of the sender in order to
 * allow peers to respond to the requests, while also sending it further
 * upwards in case the siblings can't deliver. Almost like entities would
 * consult parties in their local economy before seeking support elsewhere in
 * the hierarchical maze of an economic system.
 *
 * Press [init] to spark a simple network and press play. You initiate a
 * request for resources by clicking on a terminating node (a bank, hotel,
 * office or co) and placing a request. Intermediate nodes (the ones with
 * flags) cannot request * since they are only there to define the
 * relationships between the real participants of this joke of an economy.
 * The progress bar to the top-right indicates how much of capital capacity is
 * utilized. Units that are completely full (100% capital = all green) need no
 * more capital and will not send messages for any. Try to place requests from
 * units with red spaces in their capital bars which indicates that there is
 * ample room to accomodate more capital. That way a request for capital can
 * be sent and you can explore how units in the local economy respond first
 * after receiving the requests and gradually the requests finds it way to more
 * remote entities.
 *
 * At some time, I should model that everything has a burn rate. Hotels just
 * burn cash, factories produce cash and banks buffer cash while adding magic
 * chunks to cash deposits. The routing strategies of the intermediate nodes
 * may need to be expanded too because it is remarkably unintelligent at this
 * very moment.
 */
type Index: 100..120; // Sloppy alternative for ids
type NodeIndex: Index;
type RelationshipIndex: Index;
type MessageIndex: Index;
type Capital: 0..1000;
type Version: 0..1000;

type NodeName: either {
  EU, // Europe
  NL, // The Netherlands
  DE, // Germany
  FR, // France
  ES, // Spain
  JP, // Japan
  AE, // United Arab Emirates
  UK, // United Kingdom
  CN, // China
  ID, // Indonesia
  US, // US

  Co,
  Bank,
  Factory,
  Hotel,
};

type Payload : either {
  Blank,
  Request {
    source: NodeIndex,
    amount: Capital,
  },
  Response {
    source: NodeIndex,
    request: Request,
    amount: Capital,
  }
}

type MessagePath : Vector<RelationshipIndex>[0..10];

type Message : record {
  history: MessagePath,
  payload: Payload,
  direction: either { Up, Down, Both },
  iteration: Version,
};

type MessageBuffer : Vector<Message>[MessageIndex];
type RelationshipList: Set<RelationshipIndex>[0..10];

type Node : either {
  Nonexisting,
  Existing {
    id: Index,
    amount: Capital,           // total amount of capital
    minimum: Capital,          // minimal amount of capital to maintain
    transactionLimit: Capital, // limit of any single transaction
    maximum: Capital,          // maximum holding capacity of asset
    reserved: Capital,         // capital reserved for outstanding transactons
    expected: Capital,         // capital expected from outstanding transactions
    name: NodeName,
    generator: Boolean,
    active: Boolean,
    inbox: MessageBuffer,       // incoming messages mailbox
    outbox: MessageBuffer,      // outgoing messages mailbox
    downlink: RelationshipList, // relationships up the hierarchy
    uplink: RelationshipList,   // relationships down the hierarchy
  },
};

type Relationship : either {
  Unrelated,
  Unidirectional {
    parent: NodeIndex,
    child: NodeIndex,
  }
};

var nextIndex: Index;
var nextNodeIndex: NodeIndex;
var nextRelationshipIndex: RelationshipIndex;

var queues : Array<MessageBuffer>[RelationshipIndex];
var network : Array<Relationship>[RelationshipIndex];
var manifest : Array<Node>[NodeIndex];
var responses : Vector<Response>[0..10];

var z_manifest: Version;
var z_network: Version;
var z_queues: Version;
var z_responses: Version;

var initialized : Boolean = False;
external init {
  if(!initialized) {
    setupInitialNetwork();
    initialized = True;
  }
}

function setupInitialNetwork() {
//  var nEU: NodeIndex = createNode(EU, 0, 0, 0, 0);
//  var nNetherlands: NodeIndex = createNode(NL, 0, 0, 0, 0);
//  var nGermany: NodeIndex = createNode(DE, 0, 0, 0, 0);
//  var nGermany1: NodeIndex = createNode(Factory, 0, 0, 02);
  var nUK: NodeIndex = createNode(UK, 0, 0, 0, 0);
//  var nIndonesia: NodeIndex = createNode(ID, 0, 0, 0, 0);
  var nUS : NodeIndex = createNode(US, 0, 0, 0, 0);
  var nUS1: NodeIndex = createNode(Co, 50, 0, 10, 200);
  var nUS2: NodeIndex = createNode(Bank, 100, 0, 10, 120);
  var nUS3: NodeIndex = createNode(Hotel, 40, 0, 2, 80);
  var nChina: NodeIndex = createNode(CN, 0, 0, 0, 0);
  var nChina1: NodeIndex = createNode(Co, 50, 0, 10, 200);
  var nChina2: NodeIndex = createNode(Bank, 100, 0, 10, 200);
  var nChina3: NodeIndex = createNode(Factory, 150, 0, 10, 200);
  var nChina4: NodeIndex = createNode(Hotel, 40, 0, 2, 80);

//  createRelationship(nEU, nNetherlands);
//  createRelationship(nEU, nGermany);
//  createRelationship(nGermany, nGermany1);
//  createRelationship(nEU, nUK);
//  createRelationship(nUS, nUK);
//  createRelationship(nUK, nIndonesia);
//  createRelationship(nNetherlands, nIndonesia);
//  createRelationship(nUK, nChina);
  createRelationship(nUS, nUS1);
  createRelationship(nUS, nUS2);
  createRelationship(nUS, nUS3);
  createRelationship(nUS, nChina);
  createRelationship(nChina, nChina1);
  createRelationship(nChina, nChina2);
  createRelationship(nChina, nChina3);
  createRelationship(nChina, nChina4);
}

// mailing
function addToOutbox(message: Message, owner: RelationshipIndex) -> Boolean {
  match manifest[owner] {
    Existing(sender) {
      if(!full(sender.outbox)) {
        push(sender.outbox, message);
        z_manifest = bump(z_manifest);
        manifest[owner] = sender;
        return True;
      }
    }
    default {}
  }
  return False;
}

function removeFromOutbox(message: Message, owner: RelationshipIndex) {
  match manifest[owner] {
    Existing(sender) {
      remove(sender.outbox, message);
      z_manifest = bump(z_manifest);
      manifest[owner] = sender;
    }
    default {}
  }
}

function addToInbox(message: Message, owner: RelationshipIndex) -> Boolean {
  match manifest[owner] {
    Existing(receiver) {
      if(full(receiver.inbox) == True) {
        return False;
      } else {
        push(receiver.inbox, message);
        manifest[owner] = receiver; // TODO: necessary?
        z_manifest = bump(z_manifest);
        return True;
      }
    }
    default {
      return False;
    }
  }
}

function removeFromInbox(message: Message, owner: RelationshipIndex) {
  match manifest[owner] {
    Existing(receiver) {
      remove(receiver.inbox, message);
      manifest[owner] = receiver;
      z_manifest = bump(z_manifest);
    }
    default {}
  }
}

function placeMessages(nodeId: NodeIndex) {
  match manifest[nodeId] {
    Existing(sender) {
      for message in sender.outbox {
        var outgoing : Message = message;
    
        for uplink in sender.uplink {
          if(message.direction == Up) {
            queueMessage(uplink, outgoing);
          }
        }

        for downlink in sender.downlink {
          if(message.direction == Down) {
            queueMessage(downlink, outgoing);
          }
        }

        removeFromOutbox(message, nodeId);
      }
    }
    default {}
  }
}

function queueMessage(conduit: RelationshipIndex, message: Message) -> Boolean {
  if(full(queues[conduit]) == True) {
    return False;
  } else {
    if(contains(message.history, conduit) == True) {
      return False;
    } else {
      push(queues[conduit], message);
      z_queues = bump(z_queues);
      return True;
    }
  }
}

function unqueueMessage(recipient: RelationshipIndex, message: Message) -> Boolean {
  if(remove(queues[recipient], message) == True) {
    z_queues = bump(z_queues);
    return True;
  } else {
    return False;
  }
}

rule send for actorId, actor in manifest {
  placeMessages(actorId);
}

rule deliver for relationId, relation in network {
  for enroute in queues[relationId] {
    match relation {
      Unidirectional(link) {
        // take messages in transit and deliver them to inboxes
        if(!full(enroute.history)) {
          var sendable : Message = enroute;
          push(sendable.history, relationId);

          if (enroute.direction == Down) {
            addToInbox(sendable, link.child);
          }

          if (enroute.direction == Up) {
            addToInbox(sendable, link.parent);
          }

          unqueueMessage(relationId, enroute);
        }
      }
      default {}
    }
  }
}

rule relay for nodeId, node in manifest {
  match node {
    Existing(relayer) {
      for message in relayer.inbox {
        if(relayer.maximum == 0) {
          var sendable : Message = message;

          // TODO: check if request is still active before relaying
          //if(message.direction == Up && message.iteration < 1) {
            // relay message
            if(addToOutbox(sendable, nodeId)) {
              removeFromInbox(message, nodeId);
              // also propagate message downwards
              sendable.iteration = bump(message.iteration);
              if(sendable.direction == Up) {
                sendable.direction = Down;
              } else {
                sendable.direction = Up;
              }
              addToOutbox(sendable, nodeId);
            }
          //}
        }
      }
    }
    default {}
  }
}

rule process for nodeId, node in manifest {
  match node {
    Existing(processor) {
      for message in processor.inbox {
        var sendable : Message = message;
        if(processor.maximum > 0) {
          match message.payload {
            // handle request
            Request(request) {
              var available : Capital;
              var offerable : Capital;
              var margin : Capital = 20;

              if(processor.amount > processor.reserved) {
                available = processor.amount-processor.reserved;
              }

              if(request.amount > available) {
                if(available > margin) {
                  offerable = available-margin;
                }
              } else {
                if(available > margin) {
                  if(request.amount < (available-margin)) {
                    offerable = request.amount;
                  } else {
                    offerable = available-margin;
                  }
                }
              }

              respond(nodeId, request, min(offerable, processor.transactionLimit));
              removeFromInbox(message, nodeId);
            }
            default {}
          }
        }
      }
    }
    default {}
  }
}

rule settle for response in responses {
  match manifest[response.source] {
    Existing(provider) {
      match manifest[response.request.source] {
        Existing(requestor) {
          var consumed : Existing = requestor;
          var provided : Existing = provider;
          var processable : Capital = 0;

          if(requestor.maximum>requestor.amount) {
            if(requestor.maximum-requestor.amount < response.amount) {
              processable = requestor.maximum-requestor.amount;
            } else {
              processable = response.amount;
            }
  
            consumed.amount = requestor.amount + processable;
            provided.amount = provider.amount - processable;
            provided.reserved = provider.reserved - response.amount;
  
            manifest[response.source] = provided;
            manifest[response.request.source] = consumed;
            z_manifest = bump(z_manifest);
          }

          if(remove(responses, response) == True) {
            z_responses = bump(z_responses);
          }
        }
        default{}
      }
    }
    default {}
  }
}

function respond(responder: NodeIndex, request: Request, amount: Capital) {
  match manifest[responder] {
    Existing(actor) {
      if(!full(responses)) {
        actor.reserved = actor.reserved+amount;
        push(responses, Response {
          source: responder,
          request: request,
          amount: amount,
        });
        z_responses = bump(z_responses);
        manifest[responder] = actor;
      }
    }
    default {}
  }
}

// externals
external request for nodeId, node in manifest {
  match manifest[nodeId] {
    Existing(requestor) {
      var processable : Capital = 0;
      if(requestor.maximum > requestor.amount) {
        processable = requestor.maximum - requestor.amount;
        //if(processable > 0) {
          var message : Message = Message {
            direction: Up,
            payload: Request {
              source: nodeId,
              amount: processable,
            }
          };
          addToOutbox(message, nodeId);
        //}
      }
    }
    default {}
  }
}

external activate for nodeId, node in manifest {
  match node {
    Existing(p) {
      p.active = True;
      manifest[nodeId] = p;
    }
    default {}
  }
}

external deactivate for nodeId, node in manifest {
  match node {
    Existing(p) {
      p.active = False;
      manifest[nodeId] = p;
    }
    default {}
  }
}

external fillup for nodeId, node in manifest {
  match node {
    Existing(p) {
      p.amount = p.maximum;
      manifest[nodeId] = p;
    }
    default {}
  }
}

// helpers
function createNode(name: NodeName, amount: Capital, min: Capital, per: Capital, max: Capital) -> NodeIndex {
  var generatedIndex : NodeIndex = generateNodeIndex();
  addNode(generatedIndex, amount, min, per, max, name, False, True);
  return generatedIndex;
}

function addNode(id: NodeIndex, amount: Capital, min: Capital, per: Capital, max: Capital, name: NodeName, gen: Boolean, active: Boolean) {
  manifest[id] = Existing { id: id, amount: amount, minimum: min, transactionLimit: per, maximum: max, name: name, generator: gen, active: active};
  z_manifest = bump(z_manifest);
}

function removeNode(id: NodeIndex) {
  manifest[id] = Nonexisting;
  z_manifest = bump(z_manifest);
}

function createRelationship(a: NodeIndex, b: NodeIndex) -> RelationshipIndex {
  var generatedIndex : RelationshipIndex = generateRelationshipIndex();
  addRelationship(generatedIndex, a, b);
  return generatedIndex;
}

function addRelationship(id: RelationshipIndex, source: NodeIndex, target: NodeIndex) {
  network[id] = Unidirectional { parent: source, child: target };

  match manifest[source] {
    Existing(parent) {
      push(parent.downlink, id);
      manifest[source] = parent;
      z_network = bump(z_network);
    }
    default {}
  }

  match manifest[target] {
    Existing(child) {
      push(child.uplink, id);
      manifest[target] = child;
      z_network = bump(z_network);
    }
    default {}
  }
}

function removeRelationship(id: RelationshipIndex) {
  network[id] = Unrelated;
  z_network = bump(z_network);
}

function generateIndex() -> Index {
  var tempIndex: Index;
  tempIndex = nextIndex;
  nextIndex+=1;
  return tempIndex;
}

function generateNodeIndex() -> Index {
  var tempIndex: Index = nextNodeIndex;
  // TODO: check if next index exists and return UnrelatedIndex otherwise
  nextNodeIndex+=1;
  return tempIndex;
}

function generateRelationshipIndex() -> Index {
  var tempIndex: Index = nextRelationshipIndex;
  nextRelationshipIndex+=1;
  return tempIndex;
}

// utils
function bump(x: Version) -> Version {
  return((x + 1) % 999);
}

function min(a: Capital, b: Capital) -> Capital {
  if(a > b) {
    return b;
  } else {
    return a;
  }
}
